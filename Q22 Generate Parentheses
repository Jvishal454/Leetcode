class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        
   
        
        stack = []
        res = []
        
        def backtrack(opeN, close):
            if opeN == close == n:
                res.append("".join(stack))
                return
            
            if opeN < n:
                stack.append("(")
                backtrack(opeN + 1, close)
                stack.pop()
                
            if close < opeN:
                stack.append(")")
                backtrack(opeN, close + 1)
                stack.pop()
        backtrack(0,0)
        return res
                
        
        
